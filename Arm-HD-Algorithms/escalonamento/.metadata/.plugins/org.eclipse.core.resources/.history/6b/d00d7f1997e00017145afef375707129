package controller;


import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;

import javax.swing.text.AbstractDocument.DefaultDocumentEvent;
import javax.xml.bind.helpers.DefaultValidationEventHandler;

import model.Estatistics;
import view.Configure;

public class SCAN extends Estatistics{
	//data SCAN algorithm
	private LinkedList<Integer>callResquisitionsOrder ;		
	private LinkedList<Integer>distances ;
	private int finalDisc;
	public int scheduler;

	public SCAN(Configure configure,LinkedList<Integer>Process){
		this.callResquisitionsOrder = new LinkedList<>();
		this.distances = new LinkedList<>();		
		this.setFinalDisc(configure.getQntdCiliders());
		this.schedulerSCAN(configure.getDiscArmInitialCilinder(), Process);
	}

	public LinkedList<Integer> getCallRequisitionOrder(){		
		return callResquisitionsOrder;
	}

	public LinkedList<Integer> getDistances(){
		return distances;
	}

	private void schedulerSCAN(int atualPosition,LinkedList<Integer>Process) {
				
		
		Process.sort(null);		
		System.out.println(Process);
		int sentido = 1;//descendo
		
		int i = 0;		
		while(atualPosition >= Process.get(i) && i < Process.size()) {
			i++;
		}
		
		//fatiando listas
		LinkedList<Integer> minList = new LinkedList<>(Process.subList(0, i));
		Collections.sort(minList, new Comparator<Object>() {
			public int compare(Object num1, Object num2) {                
				return (Integer)num1 >= (Integer)num2?-1:1;
			}
		});
		int deviation;
		LinkedList<Integer>maiorList = new LinkedList<>(Process.subList(i, Process.size()));
		LinkedList<Integer> list;
		if((atualPosition - minList.getLast())>(maiorList.getFirst() - atualPosition)) {
			sentido*=-1;
			System.out.println("descendo");
			minList.addAll(maiorList);
			list = new LinkedList<>(minList);			
			scheduler = (atualPosition)+list.getLast();

		}
		else {
			maiorList.addAll(minList);
			System.out.println("subindo");
			list = new LinkedList<>(maiorList);
			scheduler = list.getLast() - atualPosition+list.getLast();

		}

		
		
		while(!list.isEmpty()) {		
			callResquisitionsOrder.addLast(atualPosition);			
			distances.addLast(Math.abs(atualPosition - list.getFirst()));			
			atualPosition = list.removeFirst();			
		}	
}



public void printData() {		
	System.out.println("Processos Chamados    = "+this.callResquisitionsOrder);
	System.out.println("Distancias            = "+this.distances);

}

@Override
public String toString() {
	return "SCAN "
			+ "\n callResquisitionsOrder = "+ callResquisitionsOrder 
			+ "\n distances = " + distances;
}

public int getFinalDisc() {
	return finalDisc;
}

public void setFinalDisc(int finalDisc) {
	this.finalDisc = finalDisc;
}



}
